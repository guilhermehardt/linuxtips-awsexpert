AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Config
Parameters:
  BucketName:
    Description: The Bucket name
    Type: String
    Default: "s3-aws-config-giropops-2020"
Resources:  
  s3Config:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
  s3ConfigPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3Config
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailList
          Effect: Allow
          Principal:
            Service: 
              - cloudtrail.amazonaws.com
              - config.amazonaws.com
          Action:
            - "s3:ListBucket"
            - "s3:GetBucketAcl"
          Resource: !Sub 'arn:aws:s3:::${s3Config}'
        - Sid: AWSCloudTrailFullAccess
          Effect: Allow
          Principal:
            Service: 
              - cloudtrail.amazonaws.com
              - config.amazonaws.com
          Action:
            - "s3:DeleteObject"
            - "s3:GetObject"
            - "s3:PutObject"
          Resource: !Sub 'arn:aws:s3:::${s3Config}/*'
  # AWS Config Recorder
  deliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: TwentyFour_Hours
      S3BucketName: !Ref s3Config
  recorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      RoleARN:
        'Fn::GetAtt':
          - roleAWSConfig
          - Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
  roleAWSConfig:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSConfigRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: accessing-s3-bucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: !Sub "arn:aws:s3:::${s3Config}/*"
      RoleName: iamRoleForAWSConfig
  # root-account-mfa-enabled
  ruleMFA:
    Type: AWS::Config::ConfigRule
    DependsOn:
      - recorder
    Properties:
      ConfigRuleName: root-account-mfa-enabled
      Scope:
        ComplianceResourceTypes: []
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED
      MaximumExecutionFrequency: TwentyFour_Hours
  # iam-password-policy
  passwordPolicy:
    Type: AWS::Config::ConfigRule
    DependsOn:
      - recorder    
    Properties:
      ConfigRuleName: iam-password-policy
      Scope:
        ComplianceResourceTypes: []
      InputParameters:
        RequireLowercaseCharacters: 'true'
        RequireUppercaseCharacters: 'true'
        RequireSymbols: 'true'
        RequireNumbers: 'true'
        MinimumPasswordLength: '20'
        PasswordReusePrevention: '20'
        MaxPasswordAge: '120'
      Source:
        Owner: AWS
        SourceIdentifier: IAM_PASSWORD_POLICY
      MaximumExecutionFrequency: TwentyFour_Hours
  # approved-amis-by-id
  approvedAmisById:
    Type: AWS::Config::ConfigRule
    DependsOn:
      - recorder
    Properties:
      ConfigRuleName: approved-amis-by-id
      Scope:
        ComplianceResourceTypes:
          - 'AWS::EC2::Instance'
      Source:
        Owner: AWS
        SourceIdentifier: APPROVED_AMIS_BY_ID      
      InputParameters:
        amiIds: 'ami-0fc20dd1da406780b'
  instanceTags: 
    Type: AWS::Config::ConfigRule
    DependsOn:
      - recorder
    Properties: 
      Scope: 
        ComplianceResourceTypes: 
          - "AWS::EC2::Instance"
      Source: 
        Owner: AWS
        SourceIdentifier: REQUIRED_TAGS
      InputParameters:
        tag1Key: Name
